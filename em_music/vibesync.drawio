<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36" version="26.0.16">
  <diagram name="Page-1" id="LyAcxEIUK0LsX1fmSSqz">
    <mxGraphModel dx="794" dy="446" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <UserObject label="" plantUmlData="{&#xa;  &quot;data&quot;: &quot;import streamlit as st\nfrom streamlit_webrtc import webrtc_streamer\nimport av\nimport cv2\nimport numpy as np\nimport mediapipe as mp\nfrom keras.models import load_model\nimport webbrowser\nimport os\nimport pandas as pd\n\n# Sample user credentials\nUSER_CREDENTIALS = {\&quot;user1\&quot;: \&quot;password1\&quot;, \&quot;user2\&quot;: \&quot;password2\&quot;}\n\n# Paths for model and labels\nmodel_path = os.path.join(os.path.abspath(os.path.join(os.getcwd(), os.pardir)), \&quot;model.h5\&quot;)\nlabels_path = os.path.join(os.path.abspath(os.path.join(os.getcwd(), os.pardir)), \&quot;labels.npy\&quot;)\n\n# Load model and labels\nmodel = load_model(model_path)\nlabel = np.load(labels_path)\n\n# Mediapipe setup\nholistic = mp.solutions.holistic\nhands = mp.solutions.hands\nholis = holistic.Holistic()\ndrawing = mp.solutions.drawing_utils\n\n# Inject CSS for styling\nst.markdown(\n    \&quot;\&quot;\&quot;\n    &lt;style&gt;\n    .main {\n        background-color: #f7f7f7;\n    }\n    h1 {\n        color: #1f77b4;\n        text-align: center;\n        font-family: &#39;Arial&#39;, sans-serif;\n    }\n    .stButton &gt; button {\n        background-color: #4CAF50;\n        color: white;\n        border: none;\n        border-radius: 5px;\n        padding: 10px 20px;\n        font-size: 16px;\n    }\n    .stButton &gt; button:hover {\n        background-color: #45a049;\n        cursor: pointer;\n    }\n    .stTextInput &gt; div &gt; input {\n        border: 2px solid #1f77b4;\n        border-radius: 5px;\n        padding: 5px;\n        font-size: 14px;\n    }\n    .stTextInput &gt; div &gt; input:focus {\n        outline: none;\n        border-color: #45a049;\n    }\n    &lt;/style&gt;\n    \&quot;\&quot;\&quot;,\n    unsafe_allow_html=True,\n)\n\n# Function to display login page\ndef login():\n    st.title(\&quot;Login\&quot;)\n    username = st.text_input(\&quot;Username\&quot;, placeholder=\&quot;Enter your username\&quot;)\n    password = st.text_input(\&quot;Password\&quot;, type=\&quot;password\&quot;, placeholder=\&quot;Enter your password\&quot;)\n    login_button = st.button(\&quot;Login\&quot;)\n\n    if login_button:\n        if username in USER_CREDENTIALS and USER_CREDENTIALS[username] == password:\n            st.session_state[\&quot;authenticated\&quot;] = True\n            st.success(\&quot;Login successful!\&quot;)\n        else:\n            st.error(\&quot;Invalid username or password\&quot;)\n\n# Function to display the main application\ndef main_app():\n    st.header(\&quot;í ¼í¾µ Emotion-Based Music Recommender í ¼í¾µ\&quot;)\n    \n    if \&quot;run\&quot; not in st.session_state:\n        st.session_state[\&quot;run\&quot;] = \&quot;true\&quot;\n\n    try:\n        emotion = np.load(\&quot;emotion.npy\&quot;)[0]\n    except:\n        emotion = \&quot;\&quot;\n\n    if not emotion:\n        st.session_state[\&quot;run\&quot;] = \&quot;true\&quot;\n    else:\n        st.session_state[\&quot;run\&quot;] = \&quot;false\&quot;\n\n    class EmotionProcessor:\n        def recv(self, frame):\n            frm = frame.to_ndarray(format=\&quot;bgr24\&quot;)\n\n            frm = cv2.flip(frm, 1)\n            res = holis.process(cv2.cvtColor(frm, cv2.COLOR_BGR2RGB))\n            lst = []\n\n            if res.face_landmarks:\n                for i in res.face_landmarks.landmark:\n                    lst.append(i.x - res.face_landmarks.landmark[1].x)\n                    lst.append(i.y - res.face_landmarks.landmark[1].y)\n\n                if res.left_hand_landmarks:\n                    for i in res.left_hand_landmarks.landmark:\n                        lst.append(i.x - res.left_hand_landmarks.landmark[8].x)\n                        lst.append(i.y - res.left_hand_landmarks.landmark[8].y)\n                else:\n                    lst.extend([0.0] * 42)\n\n                if res.right_hand_landmarks:\n                    for i in res.right_hand_landmarks.landmark:\n                        lst.append(i.x - res.right_hand_landmarks.landmark[8].x)\n                        lst.append(i.y - res.right_hand_landmarks.landmark[8].y)\n                else:\n                    lst.extend([0.0] * 42)\n\n                lst = np.array(lst).reshape(1, -1)\n                pred = label[np.argmax(model.predict(lst))]\n\n                print(pred)\n                cv2.putText(frm, pred, (50, 50), cv2.FONT_ITALIC, 1, (255, 0, 0), 2)\n                np.save(\&quot;emotion.npy\&quot;, np.array([pred]))\n\n            drawing.draw_landmarks(frm, res.face_landmarks, holistic.FACEMESH_TESSELATION,\n                                   landmark_drawing_spec=drawing.DrawingSpec(color=(0, 0, 255), thickness=-1, circle_radius=1),\n                                   connection_drawing_spec=drawing.DrawingSpec(thickness=1))\n            drawing.draw_landmarks(frm, res.left_hand_landmarks, hands.HAND_CONNECTIONS)\n            drawing.draw_landmarks(frm, res.right_hand_landmarks, hands.HAND_CONNECTIONS)\n\n            return av.VideoFrame.from_ndarray(frm, format=\&quot;bgr24\&quot;)\n\n    lang = st.text_input(\&quot;Language\&quot;, placeholder=\&quot;e.g., English, Hindi, etc.\&quot;)\n    singer = st.text_input(\&quot;Singer\&quot;, placeholder=\&quot;e.g., Arijit Singh, Taylor Swift, etc.\&quot;)\n\n    if lang and singer and st.session_state[\&quot;run\&quot;] != \&quot;false\&quot;:\n        webrtc_streamer(key=\&quot;key\&quot;, desired_playing_state=True, video_processor_factory=EmotionProcessor)\n\n    btn = st.button(\&quot;Recommend me songs\&quot;)\n\n    if btn:\n        if not emotion:\n            st.warning(\&quot;Please let me capture your emotion first.\&quot;)\n            st.session_state[\&quot;run\&quot;] = \&quot;true\&quot;\n        else:\n            query = f\&quot;{lang} {emotion} song {singer}\&quot;\n            st.info(f\&quot;Searching for: {query}\&quot;)\n            webbrowser.open(f\&quot;https://www.youtube.com/results?search_query={query}\&quot;)\n            np.save(\&quot;emotion.npy\&quot;, np.array([\&quot;\&quot;]))\n            st.session_state[\&quot;run\&quot;] = \&quot;true\&quot;\n\n# Function to display feedback page\ndef feedback_page():\n    st.header(\&quot;í ½í²¬ Feedback\&quot;)\n    name = st.text_input(\&quot;Your Name\&quot;, placeholder=\&quot;Enter your name\&quot;)\n    email = st.text_input(\&quot;Your Email\&quot;, placeholder=\&quot;Enter your email\&quot;)\n    feedback = st.text_area(\&quot;Your Feedback\&quot;, placeholder=\&quot;Write your feedback here...\&quot;)\n    submit_btn = st.button(\&quot;Submit Feedback\&quot;)\n\n    if submit_btn:\n        if name and email and feedback:\n            # Save feedback to a CSV file\n            feedback_data = {\&quot;Name\&quot;: [name], \&quot;Email\&quot;: [email], \&quot;Feedback\&quot;: [feedback]}\n            feedback_df = pd.DataFrame(feedback_data)\n            feedback_file = \&quot;feedback.csv\&quot;\n\n            if os.path.exists(feedback_file):\n                feedback_df.to_csv(feedback_file, mode=&#39;a&#39;, header=False, index=False)\n            else:\n                feedback_df.to_csv(feedback_file, index=False)\n\n            st.success(\&quot;Thank you for your feedback!\&quot;)\n        else:\n            st.error(\&quot;Please fill out all fields.\&quot;)\n\n# Main flow\nif \&quot;authenticated\&quot; not in st.session_state:\n    st.session_state[\&quot;authenticated\&quot;] = False\n\nmenu = [\&quot;Login\&quot;, \&quot;Main App\&quot;, \&quot;Feedback\&quot;]\nchoice = st.sidebar.selectbox(\&quot;Menu\&quot;, menu)\n\nif choice == \&quot;Login\&quot; and not st.session_state[\&quot;authenticated\&quot;]:\n    login()\nelif choice == \&quot;Main App\&quot; and st.session_state[\&quot;authenticated\&quot;]:\n    main_app()\nelif choice == \&quot;Feedback\&quot; and st.session_state[\&quot;authenticated\&quot;]:\n    feedback_page()\nelse:\n    st.warning(\&quot;Please log in to access this feature.\&quot;)\n\n##################y\n# cd############################################\n# import streamlit as st\n# from streamlit_webrtc import webrtc_streamer\n# import av\n# import cv2\n# import numpy as np\n# import mediapipe as mp\n# from keras.models import load_model\n# import webbrowser\n# import os\n\n# # Sample user credentials\n# USER_CREDENTIALS = {\&quot;user1\&quot;: \&quot;password1\&quot;, \&quot;user2\&quot;: \&quot;password2\&quot;}\n\n# # Paths for model and labels\n# model_path = os.path.join(os.path.abspath(os.path.join(os.getcwd(), os.pardir)), \&quot;model.h5\&quot;)\n# labels_path = os.path.join(os.path.abspath(os.path.join(os.getcwd(), os.pardir)), \&quot;labels.npy\&quot;)\n\n# # Load model and labels\n# model = load_model(model_path)\n# label = np.load(labels_path)\n\n# # Mediapipe setup\n# holistic = mp.solutions.holistic\n# hands = mp.solutions.hands\n# holis = holistic.Holistic()\n# drawing = mp.solutions.drawing_utils\n\n# # Inject CSS for styling\n# st.markdown(\n#     \&quot;\&quot;\&quot;\n#     &lt;style&gt;\n#     .main {\n#         background-color: #f7f7f7;\n#     }\n#     h1 {\n#         color: #1f77b4;\n#         text-align: center;\n#         font-family: &#39;Arial&#39;, sans-serif;\n#     }\n#     .stButton &gt; button {\n#         background-color: #4CAF50;\n#         color: white;\n#         border: none;\n#         border-radius: 5px;\n#         padding: 10px 20px;\n#         font-size: 16px;\n#     }\n#     .stButton &gt; button:hover {\n#         background-color: #45a049;\n#         cursor: pointer;\n#     }\n#     .stTextInput &gt; div &gt; input {\n#         border: 2px solid #1f77b4;\n#         border-radius: 5px;\n#         padding: 5px;\n#         font-size: 14px;\n#     }\n#     .stTextInput &gt; div &gt; input:focus {\n#         outline: none;\n#         border-color: #45a049;\n#     }\n#     &lt;/style&gt;\n#     \&quot;\&quot;\&quot;,\n#     unsafe_allow_html=True,\n# )\n\n# # Function to display login page\n# def login():\n#     st.title(\&quot;Login\&quot;)\n#     username = st.text_input(\&quot;Username\&quot;, placeholder=\&quot;Enter your username\&quot;)\n#     password = st.text_input(\&quot;Password\&quot;, type=\&quot;password\&quot;, placeholder=\&quot;Enter your password\&quot;)\n#     login_button = st.button(\&quot;Login\&quot;)\n\n#     if login_button:\n#         if username in USER_CREDENTIALS and USER_CREDENTIALS[username] == password:\n#             st.session_state[\&quot;authenticated\&quot;] = True\n#             st.success(\&quot;Login successful!\&quot;)\n#         else:\n#             st.error(\&quot;Invalid username or password\&quot;)\n\n# # Function to display the main application\n# def main_app():\n#     st.header(\&quot;í ¼í¾µ Emotion-Based Music Recommender í ¼í¾µ\&quot;)\n    \n#     if \&quot;run\&quot; not in st.session_state:\n#         st.session_state[\&quot;run\&quot;] = \&quot;true\&quot;\n\n#     try:\n#         emotion = np.load(\&quot;emotion.npy\&quot;)[0]\n#     except:\n#         emotion = \&quot;\&quot;\n\n#     if not emotion:\n#         st.session_state[\&quot;run\&quot;] = \&quot;true\&quot;\n#     else:\n#         st.session_state[\&quot;run\&quot;] = \&quot;false\&quot;\n\n#     class EmotionProcessor:\n#         def recv(self, frame):\n#             frm = frame.to_ndarray(format=\&quot;bgr24\&quot;)\n\n#             frm = cv2.flip(frm, 1)\n#             res = holis.process(cv2.cvtColor(frm, cv2.COLOR_BGR2RGB))\n#             lst = []\n\n#             if res.face_landmarks:\n#                 for i in res.face_landmarks.landmark:\n#                     lst.append(i.x - res.face_landmarks.landmark[1].x)\n#                     lst.append(i.y - res.face_landmarks.landmark[1].y)\n\n#                 if res.left_hand_landmarks:\n#                     for i in res.left_hand_landmarks.landmark:\n#                         lst.append(i.x - res.left_hand_landmarks.landmark[8].x)\n#                         lst.append(i.y - res.left_hand_landmarks.landmark[8].y)\n#                 else:\n#                     lst.extend([0.0] * 42)\n\n#                 if res.right_hand_landmarks:\n#                     for i in res.right_hand_landmarks.landmark:\n#                         lst.append(i.x - res.right_hand_landmarks.landmark[8].x)\n#                         lst.append(i.y - res.right_hand_landmarks.landmark[8].y)\n#                 else:\n#                     lst.extend([0.0] * 42)\n\n#                 lst = np.array(lst).reshape(1, -1)\n#                 pred = label[np.argmax(model.predict(lst))]\n\n#                 print(pred)\n#                 cv2.putText(frm, pred, (50, 50), cv2.FONT_ITALIC, 1, (255, 0, 0), 2)\n#                 np.save(\&quot;emotion.npy\&quot;, np.array([pred]))\n\n#             drawing.draw_landmarks(frm, res.face_landmarks, holistic.FACEMESH_TESSELATION,\n#                                    landmark_drawing_spec=drawing.DrawingSpec(color=(0, 0, 255), thickness=-1, circle_radius=1),\n#                                    connection_drawing_spec=drawing.DrawingSpec(thickness=1))\n#             drawing.draw_landmarks(frm, res.left_hand_landmarks, hands.HAND_CONNECTIONS)\n#             drawing.draw_landmarks(frm, res.right_hand_landmarks, hands.HAND_CONNECTIONS)\n\n#             return av.VideoFrame.from_ndarray(frm, format=\&quot;bgr24\&quot;)\n\n#     lang = st.text_input(\&quot;Language\&quot;, placeholder=\&quot;e.g., English, Hindi, etc.\&quot;)\n#     singer = st.text_input(\&quot;Singer\&quot;, placeholder=\&quot;e.g., Arijit Singh, Taylor Swift, etc.\&quot;)\n\n#     if lang and singer and st.session_state[\&quot;run\&quot;] != \&quot;false\&quot;:\n#         webrtc_streamer(key=\&quot;key\&quot;, desired_playing_state=True, video_processor_factory=EmotionProcessor)\n\n#     btn = st.button(\&quot;Recommend me songs\&quot;)\n\n#     if btn:\n#         if not emotion:\n#             st.warning(\&quot;Please let me capture your emotion first.\&quot;)\n#             st.session_state[\&quot;run\&quot;] = \&quot;true\&quot;\n#         else:\n#             query = f\&quot;{lang} {emotion} song {singer}\&quot;\n#             st.info(f\&quot;Searching for: {query}\&quot;)\n#             webbrowser.open(f\&quot;https://www.youtube.com/results?search_query={query}\&quot;)\n#             np.save(\&quot;emotion.npy\&quot;, np.array([\&quot;\&quot;]))\n#             st.session_state[\&quot;run\&quot;] = \&quot;true\&quot;\n\n# # Main flow\n# if \&quot;authenticated\&quot; not in st.session_state:\n#     st.session_state[\&quot;authenticated\&quot;] = False\n\n# if not st.session_state[\&quot;authenticated\&quot;]:\n#     login()\n# else:\n#     main_app()\n\n#################################################################\n################################################################\n# import streamlit as st\n# from streamlit_webrtc import webrtc_streamer\n# import av\n# import cv2\n# import numpy as np\n# import mediapipe as mp\n# from keras.models import load_model\n# import webbrowser\n# import os\n\n# # Sample user credentials\n# USER_CREDENTIALS = {\&quot;user1\&quot;: \&quot;password1\&quot;, \&quot;user2\&quot;: \&quot;password2\&quot;}\n\n# # Paths for model and labels\n# model_path = os.path.join(os.path.abspath(os.path.join(os.getcwd(), os.pardir)), \&quot;model.h5\&quot;)\n# labels_path = os.path.join(os.path.abspath(os.path.join(os.getcwd(), os.pardir)), \&quot;labels.npy\&quot;)\n\n# # Load model and labels\n# model = load_model(model_path)\n# label = np.load(labels_path)\n\n# # Mediapipe setup\n# holistic = mp.solutions.holistic\n# hands = mp.solutions.hands\n# holis = holistic.Holistic()\n# drawing = mp.solutions.drawing_utils\n\n# # Function to display login page\n# def login():\n#     st.title(\&quot;Login\&quot;)\n#     username = st.text_input(\&quot;Username\&quot;)\n#     password = st.text_input(\&quot;Password\&quot;, type=\&quot;password\&quot;)\n#     login_button = st.button(\&quot;Login\&quot;)\n\n#     if login_button:\n#         if username in USER_CREDENTIALS and USER_CREDENTIALS[username] == password:\n#             st.session_state[\&quot;authenticated\&quot;] = True\n#             st.success(\&quot;Login successful!\&quot;)\n#         else:\n#             st.error(\&quot;Invalid username or password\&quot;)\n\n# # Function to display the main application\n# def main_app():\n#     st.header(\&quot;Emotion Based Music Recommender\&quot;)\n    \n#     if \&quot;run\&quot; not in st.session_state:\n#         st.session_state[\&quot;run\&quot;] = \&quot;true\&quot;\n\n#     try:\n#         emotion = np.load(\&quot;emotion.npy\&quot;)[0]\n#     except:\n#         emotion = \&quot;\&quot;\n\n#     if not emotion:\n#         st.session_state[\&quot;run\&quot;] = \&quot;true\&quot;\n#     else:\n#         st.session_state[\&quot;run\&quot;] = \&quot;false\&quot;\n\n#     class EmotionProcessor:\n#         def recv(self, frame):\n#             frm = frame.to_ndarray(format=\&quot;bgr24\&quot;)\n\n#             frm = cv2.flip(frm, 1)\n#             res = holis.process(cv2.cvtColor(frm, cv2.COLOR_BGR2RGB))\n#             lst = []\n\n#             if res.face_landmarks:\n#                 for i in res.face_landmarks.landmark:\n#                     lst.append(i.x - res.face_landmarks.landmark[1].x)\n#                     lst.append(i.y - res.face_landmarks.landmark[1].y)\n\n#                 if res.left_hand_landmarks:\n#                     for i in res.left_hand_landmarks.landmark:\n#                         lst.append(i.x - res.left_hand_landmarks.landmark[8].x)\n#                         lst.append(i.y - res.left_hand_landmarks.landmark[8].y)\n#                 else:\n#                     lst.extend([0.0] * 42)\n\n#                 if res.right_hand_landmarks:\n#                     for i in res.right_hand_landmarks.landmark:\n#                         lst.append(i.x - res.right_hand_landmarks.landmark[8].x)\n#                         lst.append(i.y - res.right_hand_landmarks.landmark[8].y)\n#                 else:\n#                     lst.extend([0.0] * 42)\n\n#                 lst = np.array(lst).reshape(1, -1)\n#                 pred = label[np.argmax(model.predict(lst))]\n\n#                 print(pred)\n#                 cv2.putText(frm, pred, (50, 50), cv2.FONT_ITALIC, 1, (255, 0, 0), 2)\n#                 np.save(\&quot;emotion.npy\&quot;, np.array([pred]))\n\n#             drawing.draw_landmarks(frm, res.face_landmarks, holistic.FACEMESH_TESSELATION,\n#                                    landmark_drawing_spec=drawing.DrawingSpec(color=(0, 0, 255), thickness=-1, circle_radius=1),\n#                                    connection_drawing_spec=drawing.DrawingSpec(thickness=1))\n#             drawing.draw_landmarks(frm, res.left_hand_landmarks, hands.HAND_CONNECTIONS)\n#             drawing.draw_landmarks(frm, res.right_hand_landmarks, hands.HAND_CONNECTIONS)\n\n#             return av.VideoFrame.from_ndarray(frm, format=\&quot;bgr24\&quot;)\n\n#     lang = st.text_input(\&quot;Language\&quot;)\n#     singer = st.text_input(\&quot;Singer\&quot;)\n\n#     if lang and singer and st.session_state[\&quot;run\&quot;] != \&quot;false\&quot;:\n#         webrtc_streamer(key=\&quot;key\&quot;, desired_playing_state=True, video_processor_factory=EmotionProcessor)\n\n#     btn = st.button(\&quot;Recommend me songs\&quot;)\n\n#     if btn:\n#         if not emotion:\n#             st.warning(\&quot;Please let me capture your emotion first.\&quot;)\n#             st.session_state[\&quot;run\&quot;] = \&quot;true\&quot;\n#         else:\n#             query = f\&quot;{lang} {emotion} song {singer}\&quot;\n#             st.info(f\&quot;Searching for: {query}\&quot;)\n#             webbrowser.open(f\&quot;https://www.youtube.com/results?search_query={query}\&quot;)\n#             np.save(\&quot;emotion.npy\&quot;, np.array([\&quot;\&quot;]))\n#             st.session_state[\&quot;run\&quot;] = \&quot;true\&quot;\n\n# # Main flow\n# if \&quot;authenticated\&quot; not in st.session_state:\n#     st.session_state[\&quot;authenticated\&quot;] = False\n\n# if not st.session_state[\&quot;authenticated\&quot;]:\n#     login()\n# else:\n#     main_app()\n####################################################################\n####################################################################\n# import streamlit as st\n# from streamlit_webrtc import webrtc_streamer\n# import av\n# import cv2 \n# import numpy as np \n# import mediapipe as mp \n# from keras.models import load_model\n# import webbrowser\n# import os\n\n# # Paths for model and labels\n# model_path = os.path.join(os.path.abspath(os.path.join(os.getcwd(), os.pardir)), \&quot;model.h5\&quot;)\n# labels_path = os.path.join(os.path.abspath(os.path.join(os.getcwd(), os.pardir)), \&quot;labels.npy\&quot;)\n\n# # Folder path for saving emotion.npy\n\n# # Load model and labels\n# model  = load_model(model_path)\n# label = np.load(labels_path)\n\n# # Mediapipe setup\n# holistic = mp.solutions.holistic\n# hands = mp.solutions.hands\n# holis = holistic.Holistic()\n# drawing = mp.solutions.drawing_utils\n\n# # Streamlit setup\n# st.header(\&quot;Emotion Based Music Recommender\&quot;)\n# if \&quot;run\&quot; not in st.session_state:\n#     st.session_state[\&quot;run\&quot;] = \&quot;true\&quot;\n\n# try:\n#     emotion = np.load(\&quot;emotion.npy\&quot;)[0]\n# except:\n#     emotion = \&quot;\&quot;\n\n# if not(emotion):\n#     st.session_state[\&quot;run\&quot;] = \&quot;true\&quot;\n# else:\n#     st.session_state[\&quot;run\&quot;] = \&quot;false\&quot;\n    \n\n# class EmotionProcessor:\n#     def recv(self, frame):\n#         frm = frame.to_ndarray(format=\&quot;bgr24\&quot;)\n\n#         ##############################\n#         frm = cv2.flip(frm, 1)\n\n#         res = holis.process(cv2.cvtColor(frm, cv2.COLOR_BGR2RGB))\n\n#         lst = []\n\n#         if res.face_landmarks:\n#             for i in res.face_landmarks.landmark:\n#                 lst.append(i.x - res.face_landmarks.landmark[1].x)\n#                 lst.append(i.y - res.face_landmarks.landmark[1].y)\n\n#             if res.left_hand_landmarks:\n#                 for i in res.left_hand_landmarks.landmark:\n#                     lst.append(i.x - res.left_hand_landmarks.landmark[8].x)\n#                     lst.append(i.y - res.left_hand_landmarks.landmark[8].y)\n#             else:\n#                 for i in range(42):\n#                     lst.append(0.0)\n\n#             if res.right_hand_landmarks:\n#                 for i in res.right_hand_landmarks.landmark:\n#                     lst.append(i.x - res.right_hand_landmarks.landmark[8].x)\n#                     lst.append(i.y - res.right_hand_landmarks.landmark[8].y)\n#             else:\n#                 for i in range(42):\n#                     lst.append(0.0)\n\n#             lst = np.array(lst).reshape(1, -1)\n\n#             pred = label[np.argmax(model.predict(lst))]\n\n#             print(pred)\n#             cv2.putText(frm, pred, (50, 50), cv2.FONT_ITALIC, 1, (255, 0, 0), 2)\n\n#             # Save the emotion prediction to the defined file path\n#             np.save(\&quot;emotion.npy\&quot;, np.array([pred]))\n\n#         drawing.draw_landmarks(frm, res.face_landmarks, holistic.FACEMESH_TESSELATION,\n#                                landmark_drawing_spec=drawing.DrawingSpec(color=(0, 0, 255), thickness=-1, circle_radius=1),\n#                                connection_drawing_spec=drawing.DrawingSpec(thickness=1))\n#         drawing.draw_landmarks(frm, res.left_hand_landmarks, hands.HAND_CONNECTIONS)\n#         drawing.draw_landmarks(frm, res.right_hand_landmarks, hands.HAND_CONNECTIONS)\n\n#         ##############################\n\n#         return av.VideoFrame.from_ndarray(frm, format=\&quot;bgr24\&quot;)\n\n# # Inputs for language and singer\n# lang = st.text_input(\&quot;Language\&quot;)\n# singer = st.text_input(\&quot;singer\&quot;)\n\n# # Start the webrtc streamer if the inputs are provided\n# if lang and singer and st.session_state[\&quot;run\&quot;] != \&quot;false\&quot;:\n#     webrtc_streamer(key=\&quot;key\&quot;, desired_playing_state=True, video_processor_factory=EmotionProcessor)\n\n# # Button to recommend songs\n# btn = st.button(\&quot;Recommend me songs\&quot;)\n\n# if btn:\n#     if not emotion:\n#         st.warning(\&quot;Please let me capture your emotion first.\&quot;)\n#         st.session_state[\&quot;run\&quot;] = \&quot;true\&quot;\n#     else:\n#         # Construct and open the YouTube query\n#         query = f\&quot;{lang} {emotion} song {singer}\&quot;\n#         st.info(f\&quot;Searching for: {query}\&quot;)\n#         webbrowser.open(f\&quot;https://www.youtube.com/results?search_query={query}\&quot;)\n        \n#         # Reset emotion and session state\n        # np.save(\&quot;emotion.npy\&quot;, np.array([\&quot;\&quot;]))  # Clear saved emotion\n        # st.session_state[\&quot;run\&quot;] = \&quot;true\&quot;  # Enable fresh capture\n\n\n&quot;,&#xa;  &quot;format&quot;: &quot;svg&quot;&#xa;}" id="c-mZ5FdJbWtEzwMXOex2-2">
          <mxCell style="shape=image;noLabel=1;verticalAlign=top;aspect=fixed;imageAspect=0;image=data:image/svg+xml,;" vertex="1" parent="1">
            <mxGeometry x="210" y="160" width="394" height="151" as="geometry" />
          </mxCell>
        </UserObject>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
